{
  "{\"sourceRoot\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"filename\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"plugins\":[],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "import mongodb from \"mongodb\";\nimport express from \"express\";\nimport expressGraphQL from \"express-graphql\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport routes from './routes';\nconst app = express();\nconst port = process.env.PORT || 8080;\napp.use(routes.router);\napp.get('/', (req, res) => res.send('Hello World with Express'));\napp.listen(port, function () {\n  console.log(\"Running RestHub on port \" + port);\n});\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\";\nMongoClient.connect(uri, {\n  useNewUrlParser: true\n}, (err, client) => {\n  if (err) {\n    console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n  }\n\n  console.log('Connected...');\n  const collection = client.db(\"calendar\").collection(\"dates\"); // perform actions on the collection object\n\n  client.close();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vbmdvZGIiLCJleHByZXNzIiwiZXhwcmVzc0dyYXBoUUwiLCJib2R5UGFyc2VyIiwiY29ycyIsInJvdXRlcyIsImFwcCIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInVzZSIsInJvdXRlciIsImdldCIsInJlcSIsInJlcyIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiTW9uZ29DbGllbnQiLCJ1cmkiLCJjb25uZWN0IiwidXNlTmV3VXJsUGFyc2VyIiwiZXJyIiwiY2xpZW50IiwiY29sbGVjdGlvbiIsImRiIiwiY2xvc2UiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLFNBQXBCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQixpQkFBM0I7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLGFBQXZCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsVUFBbkI7QUFFQSxNQUFNQyxHQUFHLEdBQUdMLE9BQU8sRUFBbkI7QUFDQSxNQUFNTSxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUFaLElBQW9CLElBQWpDO0FBQ0FKLEdBQUcsQ0FBQ0ssR0FBSixDQUFRTixNQUFNLENBQUNPLE1BQWY7QUFFQU4sR0FBRyxDQUFDTyxHQUFKLENBQVEsR0FBUixFQUFhLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjQSxHQUFHLENBQUNDLElBQUosQ0FBUywwQkFBVCxDQUEzQjtBQUVBVixHQUFHLENBQUNXLE1BQUosQ0FBV1YsSUFBWCxFQUFpQixZQUFZO0FBQ3hCVyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2QkFBNkJaLElBQXpDO0FBQ0osQ0FGRDtBQUlBLE1BQU1hLFdBQVcsR0FBR3BCLE9BQU8sQ0FBQ29CLFdBQTVCO0FBRUEsTUFBTUMsR0FBRyxHQUFHLHlGQUFaO0FBQ0FELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQkQsR0FBcEIsRUFBeUI7QUFBRUUsRUFBQUEsZUFBZSxFQUFFO0FBQW5CLENBQXpCLEVBQW9ELENBQUNDLEdBQUQsRUFBTUMsTUFBTixLQUFpQjtBQUNsRSxNQUFHRCxHQUFILEVBQVE7QUFDSE4sSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdURBQVosRUFBb0VLLEdBQXBFO0FBQ0o7O0FBQ0ROLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGNBQVo7QUFDQSxRQUFNTyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0UsRUFBUCxDQUFVLFVBQVYsRUFBc0JELFVBQXRCLENBQWlDLE9BQWpDLENBQW5CLENBTGtFLENBTWxFOztBQUNBRCxFQUFBQSxNQUFNLENBQUNHLEtBQVA7QUFDRixDQVJEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hbGV4ZWltaWhhbG9wb3Vsb3MvRGVza3RvcC9zYW5kYm94L2JyaXRsZXgtYXBpIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvZGIgZnJvbSBcIm1vbmdvZGJcIlxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBleHByZXNzR3JhcGhRTCBmcm9tIFwiZXhwcmVzcy1ncmFwaHFsXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzJ1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuYXBwLnVzZShyb3V0ZXMucm91dGVyKVxuXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiByZXMuc2VuZCgnSGVsbG8gV29ybGQgd2l0aCBFeHByZXNzJykpO1xuXG5hcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgY29uc29sZS5sb2coXCJSdW5uaW5nIFJlc3RIdWIgb24gcG9ydCBcIiArIHBvcnQpO1xufSk7XG5cbmNvbnN0IE1vbmdvQ2xpZW50ID0gbW9uZ29kYi5Nb25nb0NsaWVudDtcblxuY29uc3QgdXJpID0gXCJtb25nb2RiK3NydjovL2FsZXhlaTpiYXJyeWRvZzEyM0BteWZpcnN0Y2x1c3Rlci1ydWNuby5tb25nb2RiLm5ldC90ZXN0P3JldHJ5V3JpdGVzPXRydWVcIlxuTW9uZ29DbGllbnQuY29ubmVjdCh1cmksIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlIH0sIChlcnIsIGNsaWVudCkgPT4ge1xuICAgaWYoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cnJlZCB3aGlsZSBjb25uZWN0aW5nIHRvIE1vbmdvREIgQXRsYXMuLi5cXG4nLGVycik7XG4gICB9XG4gICBjb25zb2xlLmxvZygnQ29ubmVjdGVkLi4uJyk7XG4gICBjb25zdCBjb2xsZWN0aW9uID0gY2xpZW50LmRiKFwiY2FsZW5kYXJcIikuY29sbGVjdGlvbihcImRhdGVzXCIpO1xuICAgLy8gcGVyZm9ybSBhY3Rpb25zIG9uIHRoZSBjb2xsZWN0aW9uIG9iamVjdFxuICAgY2xpZW50LmNsb3NlKCk7XG59KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "mongodb",
        "express",
        "expressGraphQL",
        "bodyParser",
        "cors",
        "routes",
        "app",
        "port",
        "process",
        "env",
        "PORT",
        "use",
        "router",
        "get",
        "req",
        "res",
        "send",
        "listen",
        "console",
        "log",
        "MongoClient",
        "uri",
        "connect",
        "useNewUrlParser",
        "err",
        "client",
        "collection",
        "db",
        "close"
      ],
      "mappings": "AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,GAAG,GAAGL,OAAO,EAAnB;AACA,MAAMM,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAJ,GAAG,CAACK,GAAJ,CAAQN,MAAM,CAACO,MAAf;AAEAN,GAAG,CAACO,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACC,IAAJ,CAAS,0BAAT,CAA3B;AAEAV,GAAG,CAACW,MAAJ,CAAWV,IAAX,EAAiB,YAAY;AACxBW,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BZ,IAAzC;AACJ,CAFD;AAIA,MAAMa,WAAW,GAAGpB,OAAO,CAACoB,WAA5B;AAEA,MAAMC,GAAG,GAAG,yFAAZ;AACAD,WAAW,CAACE,OAAZ,CAAoBD,GAApB,EAAyB;AAAEE,EAAAA,eAAe,EAAE;AAAnB,CAAzB,EAAoD,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAClE,MAAGD,GAAH,EAAQ;AACHN,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAoEK,GAApE;AACJ;;AACDN,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMO,UAAU,GAAGD,MAAM,CAACE,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,CAAnB,CALkE,CAMlE;;AACAD,EAAAA,MAAM,CAACG,KAAP;AACF,CARD",
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourcesContent": [
        "import mongodb from \"mongodb\"\nimport express from \"express\";\nimport expressGraphQL from \"express-graphql\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport routes from './routes'\n\nconst app = express();\nconst port = process.env.PORT || 8080;\napp.use(routes.router)\n\napp.get('/', (req, res) => res.send('Hello World with Express'));\n\napp.listen(port, function () {\n     console.log(\"Running RestHub on port \" + port);\n});\n\nconst MongoClient = mongodb.MongoClient;\n\nconst uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\nMongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n   if(err) {\n        console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n   }\n   console.log('Connected...');\n   const collection = client.db(\"calendar\").collection(\"dates\");\n   // perform actions on the collection object\n   client.close();\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1553195631839
  },
  "{\"sourceRoot\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"filename\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"mongodb\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _expressGraphql = _interopRequireDefault(require(\"express-graphql\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nvar _routes = _interopRequireDefault(require(\"./routes\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = (0, _express.default)();\nvar port = process.env.PORT || 8080;\napp.use(_bodyParser.default.urlencoded({\n  extended: true\n}));\napp.use(_bodyParser.default.json());\napp.use(_routes.default.router);\napp.get('/', function (req, res) {\n  return res.send('Hello World with Express');\n});\napp.listen(port, function () {\n  console.log(\"Running on port \" + port); // const MongoClient = mongodb.MongoClient;\n  // const uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\n  // MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n  //    if(err) {\n  //         console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n  //    }\n  //    console.log('Connected...');\n  //    const collection = client.db(\"calendar\").collection(\"dates\");\n  //    // perform actions on the collection object\n  //    // client.close();\n  // });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFwcCIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInVzZSIsImJvZHlQYXJzZXIiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJqc29uIiwicm91dGVzIiwicm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxHQUFHLEdBQUcsdUJBQVo7QUFDQSxJQUFNQyxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUFaLElBQW9CLElBQWpDO0FBRUFKLEdBQUcsQ0FBQ0ssR0FBSixDQUFRQyxvQkFBV0MsVUFBWCxDQUFzQjtBQUM1QkMsRUFBQUEsUUFBUSxFQUFFO0FBRGtCLENBQXRCLENBQVI7QUFHQVIsR0FBRyxDQUFDSyxHQUFKLENBQVFDLG9CQUFXRyxJQUFYLEVBQVI7QUFDQVQsR0FBRyxDQUFDSyxHQUFKLENBQVFLLGdCQUFPQyxNQUFmO0FBQ0FYLEdBQUcsQ0FBQ1ksR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDQyxHQUFELEVBQU1DLEdBQU47QUFBQSxTQUFjQSxHQUFHLENBQUNDLElBQUosQ0FBUywwQkFBVCxDQUFkO0FBQUEsQ0FBYjtBQUVBZixHQUFHLENBQUNnQixNQUFKLENBQVdmLElBQVgsRUFBaUIsWUFBWTtBQUMzQmdCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHFCQUFxQmpCLElBQWpDLEVBRDJCLENBRTNCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRCxDQWREIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hbGV4ZWltaWhhbG9wb3Vsb3MvRGVza3RvcC9zYW5kYm94L2JyaXRsZXgtYXBpIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvZGIgZnJvbSBcIm1vbmdvZGJcIlxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBleHByZXNzR3JhcGhRTCBmcm9tIFwiZXhwcmVzcy1ncmFwaHFsXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzJ1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7XG4gIGV4dGVuZGVkOiB0cnVlXG59KSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2Uocm91dGVzLnJvdXRlcilcbmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKCdIZWxsbyBXb3JsZCB3aXRoIEV4cHJlc3MnKSk7XG5cbmFwcC5saXN0ZW4ocG9ydCwgZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZyhcIlJ1bm5pbmcgb24gcG9ydCBcIiArIHBvcnQpO1xuICAvLyBjb25zdCBNb25nb0NsaWVudCA9IG1vbmdvZGIuTW9uZ29DbGllbnQ7XG5cbiAgLy8gY29uc3QgdXJpID0gXCJtb25nb2RiK3NydjovL2FsZXhlaTpiYXJyeWRvZzEyM0BteWZpcnN0Y2x1c3Rlci1ydWNuby5tb25nb2RiLm5ldC90ZXN0P3JldHJ5V3JpdGVzPXRydWVcIlxuICAvLyBNb25nb0NsaWVudC5jb25uZWN0KHVyaSwgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUgfSwgKGVyciwgY2xpZW50KSA9PiB7XG4gIC8vICAgIGlmKGVycikge1xuICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cnJlZCB3aGlsZSBjb25uZWN0aW5nIHRvIE1vbmdvREIgQXRsYXMuLi5cXG4nLGVycik7XG4gIC8vICAgIH1cbiAgLy8gICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZC4uLicpO1xuICAvLyAgICBjb25zdCBjb2xsZWN0aW9uID0gY2xpZW50LmRiKFwiY2FsZW5kYXJcIikuY29sbGVjdGlvbihcImRhdGVzXCIpO1xuICAvLyAgICAvLyBwZXJmb3JtIGFjdGlvbnMgb24gdGhlIGNvbGxlY3Rpb24gb2JqZWN0XG4gIC8vICAgIC8vIGNsaWVudC5jbG9zZSgpO1xuICAvLyB9KTtcbn0pOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "app",
        "port",
        "process",
        "env",
        "PORT",
        "use",
        "bodyParser",
        "urlencoded",
        "extended",
        "json",
        "routes",
        "router",
        "get",
        "req",
        "res",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AAEAJ,GAAG,CAACK,GAAJ,CAAQC,oBAAWC,UAAX,CAAsB;AAC5BC,EAAAA,QAAQ,EAAE;AADkB,CAAtB,CAAR;AAGAR,GAAG,CAACK,GAAJ,CAAQC,oBAAWG,IAAX,EAAR;AACAT,GAAG,CAACK,GAAJ,CAAQK,gBAAOC,MAAf;AACAX,GAAG,CAACY,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACC,IAAJ,CAAS,0BAAT,CAAd;AAAA,CAAb;AAEAf,GAAG,CAACgB,MAAJ,CAAWf,IAAX,EAAiB,YAAY;AAC3BgB,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBjB,IAAjC,EAD2B,CAE3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAdD",
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourcesContent": [
        "import mongodb from \"mongodb\"\nimport express from \"express\";\nimport expressGraphQL from \"express-graphql\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport routes from './routes'\n\nconst app = express();\nconst port = process.env.PORT || 8080;\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\napp.use(routes.router)\napp.get('/', (req, res) => res.send('Hello World with Express'));\n\napp.listen(port, function () {\n  console.log(\"Running on port \" + port);\n  // const MongoClient = mongodb.MongoClient;\n\n  // const uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\n  // MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n  //    if(err) {\n  //         console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n  //    }\n  //    console.log('Connected...');\n  //    const collection = client.db(\"calendar\").collection(\"dates\");\n  //    // perform actions on the collection object\n  //    // client.close();\n  // });\n});"
      ]
    },
    "sourceType": "script",
    "mtime": 1553199468071
  },
  "{\"sourceRoot\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"filename\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
        "sourceFileName": "routes.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"mongodb\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ObjectId = _mongodb.default.ObjectID; // import bodyParser from \"body-parser\";\n// import cors from \"cors\";\n\nvar MongoClient = _mongodb.default.MongoClient;\nvar collection, db;\nvar uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\";\nvar router = new _express.default.Router();\nrouter.get('/dates/:dateId', getDate);\nrouter.get('/dates', getDates);\nrouter.post('/dates', postDate);\nrouter.put('/dates/:dateId', approveDate);\nrouter.delete('/dates/:dateId', deleteDate); // { \n// }\n\nfunction postDate(req, res) {\n  try {\n    MongoClient.connect(uri, {\n      useNewUrlParser: true\n    }, function (err, client) {\n      if (err) {\n        console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n      }\n\n      console.log('Connected...');\n      db = client;\n      collection = client.db(\"calendar\").collection(\"dates\");\n      var dateDoc = {\n        \"id\": new ObjectId(),\n        \"start\": \"2017-12-18 09:30:00\",\n        \"end\": \"2017-12-19 23:30:00\",\n        \"email\": \"email\",\n        \"name\": \"name\",\n        \"notes\": \"notes\",\n        \"approved\": false,\n        \"timestamp\": \"2017-12-19 23:30:00\" // perform actions on the collection object\n\n      };\n      collection.insertOne(dateDoc);\n      client.close();\n      res.status(200).send(dateDoc);\n    });\n  } catch (e) {\n    print(e);\n    res.status(500).send([\"Not Added\"]);\n  }\n}\n\nfunction getDate(req, res) {\n  try {\n    var dateId = req.params.dateId;\n\n    if (!dateId) {\n      res.status(400).send(\"Date not found\");\n    } else {\n      MongoClient.connect(uri, {\n        useNewUrlParser: true\n      }, function (err, client) {\n        if (err) {\n          console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n        }\n\n        console.log('Connected...');\n        db = client;\n        collection = client.db(\"calendar\").collection(\"dates\");\n        var results = collection.find({\n          \"id\": ObjectId(dateId)\n        }).toArray(function (error, documents) {\n          if (err) throw error;\n          res.status(200).send(documents);\n          client.close();\n        });\n      });\n    }\n  } catch (e) {\n    print(e);\n    res.status(500).send(\"Not found\");\n  }\n}\n\nfunction getDates(req, res) {\n  try {\n    MongoClient.connect(uri, {\n      useNewUrlParser: true\n    }, function (err, client) {\n      if (err) {\n        console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n      }\n\n      console.log('Connected...');\n      db = client;\n      collection = client.db(\"calendar\").collection(\"dates\");\n      var results = collection.find({}).toArray(function (error, documents) {\n        if (err) throw error;\n        res.status(200).send(documents);\n      });\n      client.close();\n    });\n  } catch (e) {\n    print(e);\n    res.status(500).send(\"Not found\");\n  }\n}\n\nfunction approveDate(req, res) {\n  try {\n    var dateId = req.params.dateId;\n    var dateKey = req.body.dateKey;\n\n    if (!dateId || dateKey !== \"ImTheMasterKey\") {\n      res.status(400).send(\"Date not found\");\n    } else {\n      MongoClient.connect(uri, {\n        useNewUrlParser: true\n      }, function (err, client) {\n        if (err) {\n          console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n        }\n\n        console.log('Connected...');\n        db = client;\n        collection = client.db(\"calendar\").collection(\"dates\");\n        var result = collection.updateOne({\n          \"id\": ObjectId(dateId)\n        }, {\n          $set: {\n            \"approved\": true\n          }\n        });\n        client.close();\n        res.status(200).send(result);\n      });\n    }\n  } catch (e) {\n    res.status(400).send(\"Error: Date not found\");\n  }\n}\n\nfunction deleteDate(req, res) {\n  try {\n    var dateId = req.params.dateId;\n\n    if (!dateId) {\n      res.status(400).send(\"Date not found\");\n    } else {\n      MongoClient.connect(uri, {\n        useNewUrlParser: true\n      }, function (err, client) {\n        if (err) {\n          console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n        }\n\n        console.log('Connected...');\n        db = client;\n        collection = client.db(\"calendar\").collection(\"dates\");\n        var result = collection.deleteOne({\n          \"id\": ObjectId(dateId)\n        }, function (err, db) {\n          if (err) throw err;\n          console.log('deleted');\n          client.close();\n          res.status(200).send('deleted');\n        });\n      });\n    }\n  } catch (e) {\n    res.status(400).send(\"Error: Date not found\");\n  }\n}\n\nexports.router = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "routes.js"
      ],
      "names": [
        "ObjectId",
        "mongodb",
        "ObjectID",
        "MongoClient",
        "collection",
        "db",
        "uri",
        "router",
        "express",
        "Router",
        "get",
        "getDate",
        "getDates",
        "post",
        "postDate",
        "put",
        "approveDate",
        "delete",
        "deleteDate",
        "req",
        "res",
        "connect",
        "useNewUrlParser",
        "err",
        "client",
        "console",
        "log",
        "dateDoc",
        "insertOne",
        "close",
        "status",
        "send",
        "e",
        "print",
        "dateId",
        "params",
        "results",
        "find",
        "toArray",
        "error",
        "documents",
        "dateKey",
        "body",
        "result",
        "updateOne",
        "$set",
        "deleteOne",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourcesContent": [
        "import mongodb from \"mongodb\"\nimport express from \"express\";\n\nconst ObjectId = mongodb.ObjectID;\n// import bodyParser from \"body-parser\";\n// import cors from \"cors\";\n\nconst MongoClient = mongodb.MongoClient;\nlet collection, db;\nconst uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\n\nconst router = new express.Router();\nrouter.get('/dates/:dateId', getDate)\nrouter.get('/dates', getDates)\nrouter.post('/dates', postDate)\nrouter.put('/dates/:dateId', approveDate)\nrouter.delete('/dates/:dateId', deleteDate)\n// { \n\n// }\n\nfunction postDate(req, res){\n  try {\n    MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n       if(err) {\n            console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n       }\n       console.log('Connected...');\n       db = client;\n       collection = client.db(\"calendar\").collection(\"dates\");\n\n       let dateDoc = {\n        \"id\": new ObjectId(),\n        \"start\": \"2017-12-18 09:30:00\",\n        \"end\": \"2017-12-19 23:30:00\",\n        \"email\": \"email\",\n        \"name\": \"name\",\n        \"notes\": \"notes\",\n        \"approved\": false,\n        \"timestamp\": \"2017-12-19 23:30:00\"\n       }\n       \n       // perform actions on the collection object\n       collection.insertOne(dateDoc)\n       \n       client.close();\n       res.status(200).send(dateDoc)\n    });\n\n  } catch (e) {\n    print(e)\n    res.status(500).send([\"Not Added\"])\n  }\n}\n\nfunction getDate(req, res) {\n  try {\n    let dateId = req.params.dateId;\n    if (!dateId) {\n      res.status(400).send(\"Date not found\")\n    } else {\n      MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n         if(err) {\n              console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n         }\n         console.log('Connected...');\n         db = client;\n         collection = client.db(\"calendar\").collection(\"dates\");\n         \n         let results = collection.find({\"id\": ObjectId(dateId)}).toArray((error, documents) => {\n          if (err) throw error;\n          \n          res.status(200).send(documents)\n          client.close();\n        });\n      });\n    }\n  } catch (e) {\n    print(e)\n    res.status(500).send(\"Not found\")\n  }\n}\n\nfunction getDates(req, res) {\n  try {\n    MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n       if(err) {\n            console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n       }\n       console.log('Connected...');\n       db = client;\n       collection = client.db(\"calendar\").collection(\"dates\");\n       \n       let results = collection.find({}).toArray((error, documents) => {\n          if (err) throw error;\n          \n          res.status(200).send(documents)\n        });\n       \n       client.close();\n    });\n\n  } catch (e) {\n    print(e)\n    res.status(500).send(\"Not found\")\n  }\n}\n\nfunction approveDate(req, res){\n  try {\n    let dateId = req.params.dateId;\n    let dateKey = req.body.dateKey;\n\n    if (!dateId || dateKey !== \"ImTheMasterKey\") {\n      res.status(400).send(\"Date not found\")\n    } else {\n      MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n         if(err) {\n              console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n         }\n         console.log('Connected...');\n         db = client;\n         collection = client.db(\"calendar\").collection(\"dates\");\n         \n         let result = collection.updateOne( {\"id\": ObjectId(dateId)}, { $set: {\"approved\": true} } );\n         \n         client.close();\n         res.status(200).send(result)\n      });\n    }\n  } catch(e) {\n    res.status(400).send(\"Error: Date not found\")\n  }\n}\n\nfunction deleteDate(req, res){\n  try {\n    let dateId = req.params.dateId;\n\n    if (!dateId) {\n      res.status(400).send(\"Date not found\")\n    } else {\n      MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n         if(err) {\n              console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n         }\n         console.log('Connected...');\n         db = client;\n         collection = client.db(\"calendar\").collection(\"dates\");\n         \n         let result = collection.deleteOne( {\"id\": ObjectId(dateId)}, (err, db) => {\n          if (err) throw err;\n          console.log('deleted')\n          client.close();\n          res.status(200).send('deleted')\n         });\n        \n      });\n    }\n  } catch(e) {\n    res.status(400).send(\"Error: Date not found\")\n  }\n}\n\nexports.router = router;"
      ]
    },
    "sourceType": "script",
    "mtime": 1553224795715
  }
}