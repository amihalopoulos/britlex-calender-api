{
  "{\"sourceRoot\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"filename\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"plugins\":[],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "import mongodb from \"mongodb\";\nimport express from \"express\";\nimport expressGraphQL from \"express-graphql\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport routes from './routes';\nconst app = express();\nconst port = process.env.PORT || 8080;\napp.use(routes.router);\napp.get('/', (req, res) => res.send('Hello World with Express'));\napp.listen(port, function () {\n  console.log(\"Running RestHub on port \" + port);\n});\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\";\nMongoClient.connect(uri, {\n  useNewUrlParser: true\n}, (err, client) => {\n  if (err) {\n    console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n  }\n\n  console.log('Connected...');\n  const collection = client.db(\"calendar\").collection(\"dates\"); // perform actions on the collection object\n\n  client.close();\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vbmdvZGIiLCJleHByZXNzIiwiZXhwcmVzc0dyYXBoUUwiLCJib2R5UGFyc2VyIiwiY29ycyIsInJvdXRlcyIsImFwcCIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInVzZSIsInJvdXRlciIsImdldCIsInJlcSIsInJlcyIsInNlbmQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiTW9uZ29DbGllbnQiLCJ1cmkiLCJjb25uZWN0IiwidXNlTmV3VXJsUGFyc2VyIiwiZXJyIiwiY2xpZW50IiwiY29sbGVjdGlvbiIsImRiIiwiY2xvc2UiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE9BQVAsTUFBb0IsU0FBcEI7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLFNBQXBCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQixpQkFBM0I7QUFDQSxPQUFPQyxVQUFQLE1BQXVCLGFBQXZCO0FBQ0EsT0FBT0MsSUFBUCxNQUFpQixNQUFqQjtBQUNBLE9BQU9DLE1BQVAsTUFBbUIsVUFBbkI7QUFFQSxNQUFNQyxHQUFHLEdBQUdMLE9BQU8sRUFBbkI7QUFDQSxNQUFNTSxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUFaLElBQW9CLElBQWpDO0FBQ0FKLEdBQUcsQ0FBQ0ssR0FBSixDQUFRTixNQUFNLENBQUNPLE1BQWY7QUFFQU4sR0FBRyxDQUFDTyxHQUFKLENBQVEsR0FBUixFQUFhLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjQSxHQUFHLENBQUNDLElBQUosQ0FBUywwQkFBVCxDQUEzQjtBQUVBVixHQUFHLENBQUNXLE1BQUosQ0FBV1YsSUFBWCxFQUFpQixZQUFZO0FBQ3hCVyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2QkFBNkJaLElBQXpDO0FBQ0osQ0FGRDtBQUlBLE1BQU1hLFdBQVcsR0FBR3BCLE9BQU8sQ0FBQ29CLFdBQTVCO0FBRUEsTUFBTUMsR0FBRyxHQUFHLHlGQUFaO0FBQ0FELFdBQVcsQ0FBQ0UsT0FBWixDQUFvQkQsR0FBcEIsRUFBeUI7QUFBRUUsRUFBQUEsZUFBZSxFQUFFO0FBQW5CLENBQXpCLEVBQW9ELENBQUNDLEdBQUQsRUFBTUMsTUFBTixLQUFpQjtBQUNsRSxNQUFHRCxHQUFILEVBQVE7QUFDSE4sSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdURBQVosRUFBb0VLLEdBQXBFO0FBQ0o7O0FBQ0ROLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGNBQVo7QUFDQSxRQUFNTyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0UsRUFBUCxDQUFVLFVBQVYsRUFBc0JELFVBQXRCLENBQWlDLE9BQWpDLENBQW5CLENBTGtFLENBTWxFOztBQUNBRCxFQUFBQSxNQUFNLENBQUNHLEtBQVA7QUFDRixDQVJEIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hbGV4ZWltaWhhbG9wb3Vsb3MvRGVza3RvcC9zYW5kYm94L2JyaXRsZXgtYXBpIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvZGIgZnJvbSBcIm1vbmdvZGJcIlxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBleHByZXNzR3JhcGhRTCBmcm9tIFwiZXhwcmVzcy1ncmFwaHFsXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzJ1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuYXBwLnVzZShyb3V0ZXMucm91dGVyKVxuXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiByZXMuc2VuZCgnSGVsbG8gV29ybGQgd2l0aCBFeHByZXNzJykpO1xuXG5hcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgY29uc29sZS5sb2coXCJSdW5uaW5nIFJlc3RIdWIgb24gcG9ydCBcIiArIHBvcnQpO1xufSk7XG5cbmNvbnN0IE1vbmdvQ2xpZW50ID0gbW9uZ29kYi5Nb25nb0NsaWVudDtcblxuY29uc3QgdXJpID0gXCJtb25nb2RiK3NydjovL2FsZXhlaTpiYXJyeWRvZzEyM0BteWZpcnN0Y2x1c3Rlci1ydWNuby5tb25nb2RiLm5ldC90ZXN0P3JldHJ5V3JpdGVzPXRydWVcIlxuTW9uZ29DbGllbnQuY29ubmVjdCh1cmksIHsgdXNlTmV3VXJsUGFyc2VyOiB0cnVlIH0sIChlcnIsIGNsaWVudCkgPT4ge1xuICAgaWYoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cnJlZCB3aGlsZSBjb25uZWN0aW5nIHRvIE1vbmdvREIgQXRsYXMuLi5cXG4nLGVycik7XG4gICB9XG4gICBjb25zb2xlLmxvZygnQ29ubmVjdGVkLi4uJyk7XG4gICBjb25zdCBjb2xsZWN0aW9uID0gY2xpZW50LmRiKFwiY2FsZW5kYXJcIikuY29sbGVjdGlvbihcImRhdGVzXCIpO1xuICAgLy8gcGVyZm9ybSBhY3Rpb25zIG9uIHRoZSBjb2xsZWN0aW9uIG9iamVjdFxuICAgY2xpZW50LmNsb3NlKCk7XG59KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "mongodb",
        "express",
        "expressGraphQL",
        "bodyParser",
        "cors",
        "routes",
        "app",
        "port",
        "process",
        "env",
        "PORT",
        "use",
        "router",
        "get",
        "req",
        "res",
        "send",
        "listen",
        "console",
        "log",
        "MongoClient",
        "uri",
        "connect",
        "useNewUrlParser",
        "err",
        "client",
        "collection",
        "db",
        "close"
      ],
      "mappings": "AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,cAAP,MAA2B,iBAA3B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,GAAG,GAAGL,OAAO,EAAnB;AACA,MAAMM,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAJ,GAAG,CAACK,GAAJ,CAAQN,MAAM,CAACO,MAAf;AAEAN,GAAG,CAACO,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,CAACC,IAAJ,CAAS,0BAAT,CAA3B;AAEAV,GAAG,CAACW,MAAJ,CAAWV,IAAX,EAAiB,YAAY;AACxBW,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BZ,IAAzC;AACJ,CAFD;AAIA,MAAMa,WAAW,GAAGpB,OAAO,CAACoB,WAA5B;AAEA,MAAMC,GAAG,GAAG,yFAAZ;AACAD,WAAW,CAACE,OAAZ,CAAoBD,GAApB,EAAyB;AAAEE,EAAAA,eAAe,EAAE;AAAnB,CAAzB,EAAoD,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAClE,MAAGD,GAAH,EAAQ;AACHN,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAoEK,GAApE;AACJ;;AACDN,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMO,UAAU,GAAGD,MAAM,CAACE,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,CAAnB,CALkE,CAMlE;;AACAD,EAAAA,MAAM,CAACG,KAAP;AACF,CARD",
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourcesContent": [
        "import mongodb from \"mongodb\"\nimport express from \"express\";\nimport expressGraphQL from \"express-graphql\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport routes from './routes'\n\nconst app = express();\nconst port = process.env.PORT || 8080;\napp.use(routes.router)\n\napp.get('/', (req, res) => res.send('Hello World with Express'));\n\napp.listen(port, function () {\n     console.log(\"Running RestHub on port \" + port);\n});\n\nconst MongoClient = mongodb.MongoClient;\n\nconst uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\nMongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n   if(err) {\n        console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n   }\n   console.log('Connected...');\n   const collection = client.db(\"calendar\").collection(\"dates\");\n   // perform actions on the collection object\n   client.close();\n});"
      ]
    },
    "sourceType": "module",
    "mtime": 1553195631839
  },
  "{\"sourceRoot\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"filename\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"mongodb\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _expressGraphql = _interopRequireDefault(require(\"express-graphql\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nvar _routes = _interopRequireDefault(require(\"./routes\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar app = (0, _express.default)();\nvar port = process.env.PORT || 8080;\napp.use(_bodyParser.default.urlencoded({\n  extended: true\n}));\napp.use(_bodyParser.default.json());\napp.use(_routes.default.router);\napp.get('/', function (req, res) {\n  return res.send('Hello World with Express');\n});\napp.listen(port, function () {\n  console.log(\"Running on port \" + port); // const MongoClient = mongodb.MongoClient;\n  // const uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\n  // MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n  //    if(err) {\n  //         console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n  //    }\n  //    console.log('Connected...');\n  //    const collection = client.db(\"calendar\").collection(\"dates\");\n  //    // perform actions on the collection object\n  //    // client.close();\n  // });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFwcCIsInBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInVzZSIsImJvZHlQYXJzZXIiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJqc29uIiwicm91dGVzIiwicm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxHQUFHLEdBQUcsdUJBQVo7QUFDQSxJQUFNQyxJQUFJLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxJQUFaLElBQW9CLElBQWpDO0FBRUFKLEdBQUcsQ0FBQ0ssR0FBSixDQUFRQyxvQkFBV0MsVUFBWCxDQUFzQjtBQUM1QkMsRUFBQUEsUUFBUSxFQUFFO0FBRGtCLENBQXRCLENBQVI7QUFHQVIsR0FBRyxDQUFDSyxHQUFKLENBQVFDLG9CQUFXRyxJQUFYLEVBQVI7QUFDQVQsR0FBRyxDQUFDSyxHQUFKLENBQVFLLGdCQUFPQyxNQUFmO0FBQ0FYLEdBQUcsQ0FBQ1ksR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDQyxHQUFELEVBQU1DLEdBQU47QUFBQSxTQUFjQSxHQUFHLENBQUNDLElBQUosQ0FBUywwQkFBVCxDQUFkO0FBQUEsQ0FBYjtBQUVBZixHQUFHLENBQUNnQixNQUFKLENBQVdmLElBQVgsRUFBaUIsWUFBWTtBQUMzQmdCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHFCQUFxQmpCLElBQWpDLEVBRDJCLENBRTNCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRCxDQWREIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hbGV4ZWltaWhhbG9wb3Vsb3MvRGVza3RvcC9zYW5kYm94L2JyaXRsZXgtYXBpIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbmdvZGIgZnJvbSBcIm1vbmdvZGJcIlxuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBleHByZXNzR3JhcGhRTCBmcm9tIFwiZXhwcmVzcy1ncmFwaHFsXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzJ1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDgwO1xuXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7XG4gIGV4dGVuZGVkOiB0cnVlXG59KSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2Uocm91dGVzLnJvdXRlcilcbmFwcC5nZXQoJy8nLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKCdIZWxsbyBXb3JsZCB3aXRoIEV4cHJlc3MnKSk7XG5cbmFwcC5saXN0ZW4ocG9ydCwgZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZyhcIlJ1bm5pbmcgb24gcG9ydCBcIiArIHBvcnQpO1xuICAvLyBjb25zdCBNb25nb0NsaWVudCA9IG1vbmdvZGIuTW9uZ29DbGllbnQ7XG5cbiAgLy8gY29uc3QgdXJpID0gXCJtb25nb2RiK3NydjovL2FsZXhlaTpiYXJyeWRvZzEyM0BteWZpcnN0Y2x1c3Rlci1ydWNuby5tb25nb2RiLm5ldC90ZXN0P3JldHJ5V3JpdGVzPXRydWVcIlxuICAvLyBNb25nb0NsaWVudC5jb25uZWN0KHVyaSwgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUgfSwgKGVyciwgY2xpZW50KSA9PiB7XG4gIC8vICAgIGlmKGVycikge1xuICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cnJlZCB3aGlsZSBjb25uZWN0aW5nIHRvIE1vbmdvREIgQXRsYXMuLi5cXG4nLGVycik7XG4gIC8vICAgIH1cbiAgLy8gICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZC4uLicpO1xuICAvLyAgICBjb25zdCBjb2xsZWN0aW9uID0gY2xpZW50LmRiKFwiY2FsZW5kYXJcIikuY29sbGVjdGlvbihcImRhdGVzXCIpO1xuICAvLyAgICAvLyBwZXJmb3JtIGFjdGlvbnMgb24gdGhlIGNvbGxlY3Rpb24gb2JqZWN0XG4gIC8vICAgIC8vIGNsaWVudC5jbG9zZSgpO1xuICAvLyB9KTtcbn0pOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "app",
        "port",
        "process",
        "env",
        "PORT",
        "use",
        "bodyParser",
        "urlencoded",
        "extended",
        "json",
        "routes",
        "router",
        "get",
        "req",
        "res",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AAEAJ,GAAG,CAACK,GAAJ,CAAQC,oBAAWC,UAAX,CAAsB;AAC5BC,EAAAA,QAAQ,EAAE;AADkB,CAAtB,CAAR;AAGAR,GAAG,CAACK,GAAJ,CAAQC,oBAAWG,IAAX,EAAR;AACAT,GAAG,CAACK,GAAJ,CAAQK,gBAAOC,MAAf;AACAX,GAAG,CAACY,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACC,IAAJ,CAAS,0BAAT,CAAd;AAAA,CAAb;AAEAf,GAAG,CAACgB,MAAJ,CAAWf,IAAX,EAAiB,YAAY;AAC3BgB,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBjB,IAAjC,EAD2B,CAE3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAdD",
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourcesContent": [
        "import mongodb from \"mongodb\"\nimport express from \"express\";\nimport expressGraphQL from \"express-graphql\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport routes from './routes'\n\nconst app = express();\nconst port = process.env.PORT || 8080;\n\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\napp.use(routes.router)\napp.get('/', (req, res) => res.send('Hello World with Express'));\n\napp.listen(port, function () {\n  console.log(\"Running on port \" + port);\n  // const MongoClient = mongodb.MongoClient;\n\n  // const uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\n  // MongoClient.connect(uri, { useNewUrlParser: true }, (err, client) => {\n  //    if(err) {\n  //         console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n  //    }\n  //    console.log('Connected...');\n  //    const collection = client.db(\"calendar\").collection(\"dates\");\n  //    // perform actions on the collection object\n  //    // client.close();\n  // });\n});"
      ]
    },
    "sourceType": "script",
    "mtime": 1553199468071
  },
  "{\"sourceRoot\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"filename\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/routes.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
        "sourceFileName": "routes.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"mongodb\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _db = _interopRequireDefault(require(\"./db.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ObjectId = _mongodb.default.ObjectID; // import bodyParser from \"body-parser\";\n// import cors from \"cors\";\n\nvar MongoClient = _mongodb.default.MongoClient;\nvar uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\";\nvar router = new _express.default.Router();\nrouter.get('/dates/:dateId', getDate);\nrouter.get('/dates', getDates);\nrouter.post('/dates', postDate);\nrouter.put('/dates/:dateId', approveDate);\nrouter.delete('/dates/:dateId', deleteDate);\n\nfunction postDate(req, res) {\n  try {\n    _db.default.connectAndQuery(function (err, client) {\n      if (err) {\n        res.status(500).send('Error connecting to database');\n      }\n\n      var collection = client.db(\"calendar\").collection(\"dates\");\n      var dateDoc = {\n        \"id\": new ObjectId(),\n        \"start\": req.body.start,\n        \"end\": req.body.end,\n        \"email\": req.body.email,\n        \"name\": req.body.name,\n        \"notes\": req.body.notes,\n        \"approved\": false,\n        \"timestamp\": req.body.timestamp\n      };\n      collection.insertOne(dateDoc);\n      res.status(200).send(dateDoc);\n    });\n  } catch (e) {\n    console.log(e);\n    res.status(500).send([\"Not Added\"]);\n  }\n}\n\nfunction getDate(req, res) {\n  try {\n    var dateId = req.params.dateId;\n\n    if (!dateId) {\n      res.status(400).send(\"Date not found\");\n    } else {\n      _db.default.connectAndQuery(function (err, client) {\n        if (err) {\n          res.status(500).send('Error connecting to database');\n        }\n\n        var results = client.db(\"calendar\").collection(\"dates\").find({\n          \"id\": ObjectId(dateId)\n        }).toArray(function (error, documents) {\n          if (err) throw error;\n          res.status(200).send(documents);\n        });\n      });\n    }\n  } catch (e) {\n    console.log(e);\n    res.status(500).send(\"Not found\");\n  }\n}\n\nfunction getDates(req, res) {\n  try {\n    _db.default.connectAndQuery(function (err, client) {\n      if (err) {\n        res.status(500).send('Error connecting to database');\n      }\n\n      var results = client.db(\"calendar\").collection(\"dates\").find({}).toArray(function (error, documents) {\n        if (err) throw error;\n        res.status(200).send(documents);\n      });\n    });\n  } catch (e) {\n    console.log(e);\n    res.status(500).send(\"Not found\");\n  }\n}\n\nfunction approveDate(req, res) {\n  try {\n    var dateId = req.params.dateId;\n    var dateKey = req.body.dateKey;\n\n    if (!dateId || dateKey !== \"ImTheMasterKey\") {\n      res.status(400).send(\"Date not found\");\n    } else {\n      _db.default.connectAndQuery(function (err, client) {\n        if (err) {\n          res.status(500).send('Error connecting to database');\n        }\n\n        client.db(\"calendar\").collection(\"dates\").updateOne({\n          \"id\": ObjectId(dateId)\n        }, {\n          $set: {\n            \"approved\": true\n          }\n        }, function (err, result) {\n          if (err) throw error;\n          res.status(200).send(result);\n        });\n      });\n    }\n  } catch (e) {\n    res.status(400).send(\"Error: Date not found\");\n  }\n}\n\nfunction deleteDate(req, res) {\n  try {\n    var dateId = req.params.dateId;\n\n    if (!dateId) {\n      res.status(400).send(\"Date not found\");\n    } else {\n      _db.default.connectAndQuery(function (err, client) {\n        if (err) {\n          res.status(500).send('Error connecting to database');\n        }\n\n        client.db(\"calendar\").collection(\"dates\").deleteOne({\n          \"id\": ObjectId(dateId)\n        }, function (err, result) {\n          if (err) throw err;\n          console.log('deleted');\n          res.status(200).send('deleted');\n        });\n      });\n    }\n  } catch (e) {\n    res.status(400).send(\"Error: Date not found\");\n  }\n}\n\nexports.router = router;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "routes.js"
      ],
      "names": [
        "ObjectId",
        "mongodb",
        "ObjectID",
        "MongoClient",
        "uri",
        "router",
        "express",
        "Router",
        "get",
        "getDate",
        "getDates",
        "post",
        "postDate",
        "put",
        "approveDate",
        "delete",
        "deleteDate",
        "req",
        "res",
        "dbs",
        "connectAndQuery",
        "err",
        "client",
        "status",
        "send",
        "collection",
        "db",
        "dateDoc",
        "body",
        "start",
        "end",
        "email",
        "name",
        "notes",
        "timestamp",
        "insertOne",
        "e",
        "console",
        "log",
        "dateId",
        "params",
        "results",
        "find",
        "toArray",
        "error",
        "documents",
        "dateKey",
        "updateOne",
        "$set",
        "result",
        "deleteOne",
        "exports"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,QAAQ,GAAGC,iBAAQC,QAAzB,C,CACA;AACA;;AAEA,IAAMC,WAAW,GAAGF,iBAAQE,WAA5B;AAEA,IAAMC,GAAG,GAAG,yFAAZ;AAEA,IAAMC,MAAM,GAAG,IAAIC,iBAAQC,MAAZ,EAAf;AACAF,MAAM,CAACG,GAAP,CAAW,gBAAX,EAA6BC,OAA7B;AACAJ,MAAM,CAACG,GAAP,CAAW,QAAX,EAAqBE,QAArB;AACAL,MAAM,CAACM,IAAP,CAAY,QAAZ,EAAsBC,QAAtB;AACAP,MAAM,CAACQ,GAAP,CAAW,gBAAX,EAA6BC,WAA7B;AACAT,MAAM,CAACU,MAAP,CAAc,gBAAd,EAAgCC,UAAhC;;AAEA,SAASJ,QAAT,CAAkBK,GAAlB,EAAuBC,GAAvB,EAA2B;AACzB,MAAI;AACFC,gBAAIC,eAAJ,CAAqB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpC,UAAGD,GAAH,EAAQ;AACJH,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAArB;AACH;;AACD,UAAIC,UAAU,GAAGH,MAAM,CAACI,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,CAAjB;AAEA,UAAIE,OAAO,GAAG;AACb,cAAM,IAAI3B,QAAJ,EADO;AAEb,iBAASiB,GAAG,CAACW,IAAJ,CAASC,KAFL;AAGb,eAAOZ,GAAG,CAACW,IAAJ,CAASE,GAHH;AAIb,iBAASb,GAAG,CAACW,IAAJ,CAASG,KAJL;AAKb,gBAAQd,GAAG,CAACW,IAAJ,CAASI,IALJ;AAMb,iBAASf,GAAG,CAACW,IAAJ,CAASK,KANL;AAOb,oBAAY,KAPC;AAQb,qBAAahB,GAAG,CAACW,IAAJ,CAASM;AART,OAAd;AAWAT,MAAAA,UAAU,CAACU,SAAX,CAAqBR,OAArB;AACAT,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,OAArB;AAED,KApBD;AAqBD,GAtBD,CAsBE,OAAOS,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAlB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CAAC,WAAD,CAArB;AACD;AACF;;AAED,SAASf,OAAT,CAAiBQ,GAAjB,EAAsBC,GAAtB,EAA2B;AACzB,MAAI;AACF,QAAIqB,MAAM,GAAGtB,GAAG,CAACuB,MAAJ,CAAWD,MAAxB;;AACA,QAAI,CAACA,MAAL,EAAa;AACXrB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACD,KAFD,MAEO;AACLL,kBAAIC,eAAJ,CAAqB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpC,YAAGD,GAAH,EAAQ;AACJH,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAArB;AACH;;AAED,YAAIiB,OAAO,GAAGnB,MAAM,CAACI,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,EAA0CiB,IAA1C,CAA+C;AAAC,gBAAM1C,QAAQ,CAACuC,MAAD;AAAf,SAA/C,EAAyEI,OAAzE,CAAiF,UAACC,KAAD,EAAQC,SAAR,EAAsB;AACnH,cAAIxB,GAAJ,EAAS,MAAMuB,KAAN;AACT1B,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBqB,SAArB;AACD,SAHa,CAAd;AAID,OATD;AAUD;AACF,GAhBD,CAgBE,OAAOT,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAlB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,WAArB;AACD;AACF;;AAED,SAASd,QAAT,CAAkBO,GAAlB,EAAuBC,GAAvB,EAA4B;AAC1B,MAAI;AACFC,gBAAIC,eAAJ,CAAqB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpC,UAAGD,GAAH,EAAQ;AACJH,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAArB;AACH;;AAED,UAAIiB,OAAO,GAAGnB,MAAM,CAACI,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,EAA0CiB,IAA1C,CAA+C,EAA/C,EAAmDC,OAAnD,CAA2D,UAACC,KAAD,EAAQC,SAAR,EAAsB;AAC7F,YAAIxB,GAAJ,EAAS,MAAMuB,KAAN;AACT1B,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBqB,SAArB;AACD,OAHa,CAAd;AAID,KATD;AAWD,GAZD,CAYE,OAAOT,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAlB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,WAArB;AACD;AACF;;AAED,SAASV,WAAT,CAAqBG,GAArB,EAA0BC,GAA1B,EAA8B;AAC5B,MAAI;AACF,QAAIqB,MAAM,GAAGtB,GAAG,CAACuB,MAAJ,CAAWD,MAAxB;AACA,QAAIO,OAAO,GAAG7B,GAAG,CAACW,IAAJ,CAASkB,OAAvB;;AAEA,QAAI,CAACP,MAAD,IAAWO,OAAO,KAAK,gBAA3B,EAA6C;AAC3C5B,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACD,KAFD,MAEO;AACLL,kBAAIC,eAAJ,CAAqB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpC,YAAGD,GAAH,EAAQ;AACJH,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAArB;AACH;;AAEDF,QAAAA,MAAM,CAACI,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,EAA0CsB,SAA1C,CAAqD;AAAC,gBAAM/C,QAAQ,CAACuC,MAAD;AAAf,SAArD,EAA+E;AAAES,UAAAA,IAAI,EAAE;AAAC,wBAAY;AAAb;AAAR,SAA/E,EAA6G,UAAC3B,GAAD,EAAM4B,MAAN,EAAiB;AAC5H,cAAI5B,GAAJ,EAAS,MAAMuB,KAAN;AACT1B,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqByB,MAArB;AACD,SAHD;AAID,OATD;AAUD;AACF,GAlBD,CAkBE,OAAMb,CAAN,EAAS;AACTlB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACD;AACF;;AAED,SAASR,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA6B;AAC3B,MAAI;AACF,QAAIqB,MAAM,GAAGtB,GAAG,CAACuB,MAAJ,CAAWD,MAAxB;;AAEA,QAAI,CAACA,MAAL,EAAa;AACXrB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACD,KAFD,MAEO;AACLL,kBAAIC,eAAJ,CAAqB,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACpC,YAAGD,GAAH,EAAQ;AACJH,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAArB;AACH;;AAEDF,QAAAA,MAAM,CAACI,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,EAA0CyB,SAA1C,CAAqD;AAAC,gBAAMlD,QAAQ,CAACuC,MAAD;AAAf,SAArD,EAA+E,UAAClB,GAAD,EAAM4B,MAAN,EAAiB;AAC9F,cAAI5B,GAAJ,EAAS,MAAMA,GAAN;AACTgB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACApB,UAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,SAArB;AACD,SAJD;AAKD,OAVD;AAYD;AACF,GAnBD,CAmBE,OAAMY,CAAN,EAAS;AACTlB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACD;AACF;;AAED2B,OAAO,CAAC9C,MAAR,GAAiBA,MAAjB",
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourcesContent": [
        "import mongodb from \"mongodb\"\nimport express from \"express\";\nimport dbs from './db.js'\n\nconst ObjectId = mongodb.ObjectID;\n// import bodyParser from \"body-parser\";\n// import cors from \"cors\";\n\nconst MongoClient = mongodb.MongoClient;\n\nconst uri = \"mongodb+srv://alexei:barrydog123@myfirstcluster-rucno.mongodb.net/test?retryWrites=true\"\n\nconst router = new express.Router();\nrouter.get('/dates/:dateId', getDate)\nrouter.get('/dates', getDates)\nrouter.post('/dates', postDate)\nrouter.put('/dates/:dateId', approveDate)\nrouter.delete('/dates/:dateId', deleteDate)\n\nfunction postDate(req, res){\n  try {\n    dbs.connectAndQuery( (err, client) => {\n      if(err) {\n          res.status(500).send('Error connecting to database')\n      }\n      let collection = client.db(\"calendar\").collection(\"dates\");\n\n      let dateDoc = {\n       \"id\": new ObjectId(),\n       \"start\": req.body.start,\n       \"end\": req.body.end,\n       \"email\": req.body.email,\n       \"name\": req.body.name,\n       \"notes\": req.body.notes,\n       \"approved\": false,\n       \"timestamp\": req.body.timestamp\n      }\n\n      collection.insertOne(dateDoc)\n      res.status(200).send(dateDoc)\n\n    })\n  } catch (e) {\n    console.log(e)\n    res.status(500).send([\"Not Added\"])\n  }\n}\n\nfunction getDate(req, res) {\n  try {\n    let dateId = req.params.dateId;\n    if (!dateId) {\n      res.status(400).send(\"Date not found\")\n    } else {\n      dbs.connectAndQuery( (err, client) => {\n        if(err) {\n            res.status(500).send('Error connecting to database')\n        }\n\n        let results = client.db(\"calendar\").collection(\"dates\").find({\"id\": ObjectId(dateId)}).toArray((error, documents) => {\n          if (err) throw error;\n          res.status(200).send(documents)\n        })\n      })\n    }\n  } catch (e) {\n    console.log(e)\n    res.status(500).send(\"Not found\")\n  }\n}\n\nfunction getDates(req, res) {\n  try {\n    dbs.connectAndQuery( (err, client) => {\n      if(err) {\n          res.status(500).send('Error connecting to database')\n      }\n\n      let results = client.db(\"calendar\").collection(\"dates\").find({}).toArray((error, documents) => {\n        if (err) throw error;\n        res.status(200).send(documents)\n      })\n    })\n\n  } catch (e) {\n    console.log(e)\n    res.status(500).send(\"Not found\")\n  }\n}\n\nfunction approveDate(req, res){\n  try {\n    let dateId = req.params.dateId;\n    let dateKey = req.body.dateKey;\n\n    if (!dateId || dateKey !== \"ImTheMasterKey\") {\n      res.status(400).send(\"Date not found\")\n    } else {\n      dbs.connectAndQuery( (err, client) => {\n        if(err) {\n            res.status(500).send('Error connecting to database')\n        }\n\n        client.db(\"calendar\").collection(\"dates\").updateOne( {\"id\": ObjectId(dateId)}, { $set: {\"approved\": true} }, (err, result) => {\n          if (err) throw error;\n          res.status(200).send(result)\n        });\n      });\n    }\n  } catch(e) {\n    res.status(400).send(\"Error: Date not found\")\n  }\n}\n\nfunction deleteDate(req, res){\n  try {\n    let dateId = req.params.dateId;\n\n    if (!dateId) {\n      res.status(400).send(\"Date not found\")\n    } else {\n      dbs.connectAndQuery( (err, client) => {\n        if(err) {\n            res.status(500).send('Error connecting to database')\n        }\n\n        client.db(\"calendar\").collection(\"dates\").deleteOne( {\"id\": ObjectId(dateId)}, (err, result) => {\n          if (err) throw err;\n          console.log('deleted')\n          res.status(200).send('deleted')\n        });\n      });\n\n    }\n  } catch(e) {\n    res.status(400).send(\"Error: Date not found\")\n  }\n}\n\nexports.router = router;"
      ]
    },
    "sourceType": "script",
    "mtime": 1553284720670
  },
  "{\"sourceRoot\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"filename\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/db.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/db.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/db.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api/db.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
        "sourceFileName": "db.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _mongodb = _interopRequireDefault(require(\"mongodb\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MongoClient = _mongodb.default.MongoClient;\n\nvar config = require('./config.json');\n\nfunction connectAndQuery(cb) {\n  MongoClient.connect(config.dbUri, {\n    useNewUrlParser: true\n  }, function (err, client) {\n    if (err) {\n      console.log('Error occurred while connecting to MongoDB Atlas...\\n', err);\n    }\n\n    console.log('Connected...');\n    Promise.resolve(cb(err, client)).then(function () {\n      console.log('closing connection...');\n      client.close();\n    }); // db = client;\n    // collection = client.db(\"calendar\").collection(\"dates\");\n    // let results = collection.find({\"id\": ObjectId(dateId)}).toArray((error, documents) => {\n    //  if (err) throw error;\n    //  res.status(200).send(documents)\n    //  client.close();\n    // });\n  });\n}\n\nexports.connectAndQuery = connectAndQuery;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRiLmpzIl0sIm5hbWVzIjpbIk1vbmdvQ2xpZW50IiwibW9uZ29kYiIsImNvbmZpZyIsInJlcXVpcmUiLCJjb25uZWN0QW5kUXVlcnkiLCJjYiIsImNvbm5lY3QiLCJkYlVyaSIsInVzZU5ld1VybFBhcnNlciIsImVyciIsImNsaWVudCIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJjbG9zZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQSxJQUFNQSxXQUFXLEdBQUdDLGlCQUFRRCxXQUE1Qjs7QUFDQSxJQUFNRSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQXRCOztBQUVBLFNBQVNDLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO0FBQzNCTCxFQUFBQSxXQUFXLENBQUNNLE9BQVosQ0FBb0JKLE1BQU0sQ0FBQ0ssS0FBM0IsRUFBa0M7QUFBRUMsSUFBQUEsZUFBZSxFQUFFO0FBQW5CLEdBQWxDLEVBQTZELFVBQUNDLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUMzRSxRQUFHRCxHQUFILEVBQVE7QUFDSEUsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdURBQVosRUFBb0VILEdBQXBFO0FBQ0o7O0FBQ0RFLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGNBQVo7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxPQUFSLENBQWlCVCxFQUFFLENBQUNJLEdBQUQsRUFBTUMsTUFBTixDQUFuQixFQUNDSyxJQURELENBQ08sWUFBTTtBQUNaSixNQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx1QkFBWjtBQUNBRixNQUFBQSxNQUFNLENBQUNNLEtBQVA7QUFDQSxLQUpELEVBTDJFLENBVTNFO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNEO0FBQ0QsR0FuQkQ7QUFvQkQ7O0FBRURDLE9BQU8sQ0FBQ2IsZUFBUixHQUEwQkEsZUFBMUIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FsZXhlaW1paGFsb3BvdWxvcy9EZXNrdG9wL3NhbmRib3gvYnJpdGxleC1hcGkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29kYiBmcm9tIFwibW9uZ29kYlwiXG5jb25zdCBNb25nb0NsaWVudCA9IG1vbmdvZGIuTW9uZ29DbGllbnQ7XG5jb25zdCBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZy5qc29uJyk7XG5cbmZ1bmN0aW9uIGNvbm5lY3RBbmRRdWVyeShjYikge1xuICBNb25nb0NsaWVudC5jb25uZWN0KGNvbmZpZy5kYlVyaSwgeyB1c2VOZXdVcmxQYXJzZXI6IHRydWUgfSwgKGVyciwgY2xpZW50KSA9PiB7XG4gICAgIGlmKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cnJlZCB3aGlsZSBjb25uZWN0aW5nIHRvIE1vbmdvREIgQXRsYXMuLi5cXG4nLGVycik7XG4gICAgIH1cbiAgICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZC4uLicpO1xuICAgICBQcm9taXNlLnJlc29sdmUoIGNiKGVyciwgY2xpZW50KSApXG4gICAgIC50aGVuKCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnY2xvc2luZyBjb25uZWN0aW9uLi4uJylcbiAgICAgIGNsaWVudC5jbG9zZSgpO1xuICAgICB9KVxuICAgICAvLyBkYiA9IGNsaWVudDtcbiAgICAgLy8gY29sbGVjdGlvbiA9IGNsaWVudC5kYihcImNhbGVuZGFyXCIpLmNvbGxlY3Rpb24oXCJkYXRlc1wiKTtcbiAgICAgXG4gICAgIC8vIGxldCByZXN1bHRzID0gY29sbGVjdGlvbi5maW5kKHtcImlkXCI6IE9iamVjdElkKGRhdGVJZCl9KS50b0FycmF5KChlcnJvciwgZG9jdW1lbnRzKSA9PiB7XG4gICAgIC8vICBpZiAoZXJyKSB0aHJvdyBlcnJvcjtcbiAgICAgIFxuICAgICAvLyAgcmVzLnN0YXR1cygyMDApLnNlbmQoZG9jdW1lbnRzKVxuICAgICAvLyAgY2xpZW50LmNsb3NlKCk7XG4gICAgLy8gfSk7XG4gIH0pO1xufVxuXG5leHBvcnRzLmNvbm5lY3RBbmRRdWVyeSA9IGNvbm5lY3RBbmRRdWVyeSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "db.js"
      ],
      "names": [
        "MongoClient",
        "mongodb",
        "config",
        "require",
        "connectAndQuery",
        "cb",
        "connect",
        "dbUri",
        "useNewUrlParser",
        "err",
        "client",
        "console",
        "log",
        "Promise",
        "resolve",
        "then",
        "close",
        "exports"
      ],
      "mappings": ";;AAAA;;;;AACA,IAAMA,WAAW,GAAGC,iBAAQD,WAA5B;;AACA,IAAME,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;AAEA,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AAC3BL,EAAAA,WAAW,CAACM,OAAZ,CAAoBJ,MAAM,CAACK,KAA3B,EAAkC;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAlC,EAA6D,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC3E,QAAGD,GAAH,EAAQ;AACHE,MAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAoEH,GAApE;AACJ;;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAC,IAAAA,OAAO,CAACC,OAAR,CAAiBT,EAAE,CAACI,GAAD,EAAMC,MAAN,CAAnB,EACCK,IADD,CACO,YAAM;AACZJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAF,MAAAA,MAAM,CAACM,KAAP;AACA,KAJD,EAL2E,CAU3E;AACA;AAEA;AACA;AAEA;AACA;AACD;AACD,GAnBD;AAoBD;;AAEDC,OAAO,CAACb,eAAR,GAA0BA,eAA1B",
      "sourceRoot": "/Users/alexeimihalopoulos/Desktop/sandbox/britlex-api",
      "sourcesContent": [
        "import mongodb from \"mongodb\"\nconst MongoClient = mongodb.MongoClient;\nconst config = require('./config.json');\n\nfunction connectAndQuery(cb) {\n  MongoClient.connect(config.dbUri, { useNewUrlParser: true }, (err, client) => {\n     if(err) {\n          console.log('Error occurred while connecting to MongoDB Atlas...\\n',err);\n     }\n     console.log('Connected...');\n     Promise.resolve( cb(err, client) )\n     .then( () => {\n      console.log('closing connection...')\n      client.close();\n     })\n     // db = client;\n     // collection = client.db(\"calendar\").collection(\"dates\");\n     \n     // let results = collection.find({\"id\": ObjectId(dateId)}).toArray((error, documents) => {\n     //  if (err) throw error;\n      \n     //  res.status(200).send(documents)\n     //  client.close();\n    // });\n  });\n}\n\nexports.connectAndQuery = connectAndQuery"
      ]
    },
    "sourceType": "script",
    "mtime": 1553283896918
  }
}